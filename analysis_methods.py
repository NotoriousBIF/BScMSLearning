import random
import math
from ms2deepscore import MS2DeepScore

def create_sets(master_subset, size_training, size_validation, size_testing):
    """this method randomly splits a subset into user-defined portions for training, validation and testing.
    the arguments for size_training, size_validation and size_testing are expected to be percentages e.g. 0.8. Returns
    a trainingset, validationset, testingset"""
    testing_amount = math.floor(size_testing*len(master_subset))
    validation_amount = math.floor(size_validation*len(master_subset))
    training_amount = math.floor(size_training*len(master_subset))
    testing_set = []
    validation_set = []
    training_set = []
    currentset = master_subset.copy()
    while len(currentset) != 0:
        test_proposed = random.sample(currentset, testing_amount)
        for spectrum in test_proposed:
            testing_set.append(spectrum)
            currentset.remove(spectrum)
        validation_proposed = random.sample(currentset, validation_amount)
        for s in validation_proposed:
            validation_set.append(s)
            currentset.remove(s)
        training_proposed = random.sample(currentset, training_amount)
        for i in training_proposed:
            training_set.append(i)
            currentset.remove(i)
    return training_set, validation_set, testing_set

def create_pairs(testingset):
    """takes a dataset as its argument and returns a list of randomly paired spectra. If len(testingset) not divisible
    by 2 it doesn't work."""
    outputlist = []
    currentset = testingset.copy()
    while len(currentset) != 0:
        pair = random.sample(currentset, 2)
        p1 = pair[0]
        p2 = pair[1]
        outputlist.append(pair)
        currentset.remove(p1)
        currentset.remove(p2)
    return outputlist

def generate_scores(list_of_pairs, model_to_be_used, tanimoto_df):
    """"This function takes as its arguments a list of pairs generated by create_pairs, the model that you want to use
    for predictions, and dataframe with the true tanimoto scores. Returns a list with each list entry's format being
    [ID of spectrum 1, ID of spectrum 2, predicted score, true score]. The spectrum ID's are added to the output so we
    can keep track of other metadata."""
    similarity_measure = MS2DeepScore(model_to_be_used)
    scorelist = []
    for pair in range(len(list_of_pairs)):
        current_pair = list_of_pairs[pair]
        score = similarity_measure.pair(current_pair[0], current_pair[1])
        spectrum_id1 = current_pair[0].get('spectrumid')
        spectrum_id2 = current_pair[1].get('spectrumid')
        inchikey1 = current_pair[0].get('inchikey')
        i1 = inchikey1.replace('-', '')
        correctinchi1 = i1[0:14]
        inchikey2 = current_pair[1].get('inchikey')
        i2 = inchikey2.replace('-', '')
        correctinchi2 = i2[0:14]
        true_score = tanimoto_df[correctinchi1].get(correctinchi2)
        final = (spectrum_id1, spectrum_id2, score, true_score)
        scorelist.append(final)
    return scorelist

def calculate_errors(list_of_scores):
    """This function takes the output from generate_scores and calculates the difference between the predicted score and
    the true score. Returns a list of residuals."""
    output_list = []
    for entry in range(len(list_of_scores)):
        current_entry = list_of_scores[entry]
        predicted_score = current_entry[3]
        true_score = current_entry[2]
        error = true_score - predicted_score
        output_list.append(error)
    return output_list